type Tokens = record {e8s: nat64;};
type TippingParticipants = vec Participants;
type Tipping = 
 service {
   approveSpending: (nat64, Ticker, opt nat64) -> (Result_1);
   ckbtcBalanceOfCanister: () -> (nat);
   getAllEvents: () -> (vec Event) query;
   getAllTippingTransactions: () ->
    (vec record {
           ArtistID__1;
           FanID;
           Timestamp;
           nat;
           Ticker;
         }) query;
   getMyBalance: (Ticker) -> (Result_1);
   getStatus: (opt StatusRequest) -> (opt StatusResponse);
   sendTip: (TippingParticipants, nat64, Ticker) -> (Result);
   traxBalanceOfCanister: () -> (nat);
   updatePlatformFee: (float64) -> ();
 };
type Timestamp = int;
type Ticker = text;
type StatusResponse = 
 record {
   ckbtc_balance: opt nat;
   cycles: opt nat;
   heap_memory_size: opt nat;
   icp_balance: opt Tokens;
   memory_size: opt nat;
   trax_balance: opt nat;
   version: opt nat;
 };
type StatusRequest = 
 record {
   ckbtc_balance: opt bool;
   cycles: opt bool;
   heap_memory_size: opt bool;
   icp_balance: opt bool;
   memory_size: opt bool;
   trax_balance: opt bool;
   version: opt bool;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok: vec nat;
 };
type Percentage = float64;
type Participants = 
 record {
   participantID: ArtistID;
   participantPercentage: Percentage;
 };
type FanID = principal;
type EventKind = 
 variant {
   AdminAction;
   AllowanceUpdated;
   Error;
   TipSent;
 };
type Event = 
 record {
   caller: principal;
   details:
    opt
     record {
       amount: opt nat;
       error: opt text;
       participants: opt vec principal;
     };
   kind: EventKind;
   message: text;
   timestamp: int;
 };
type ArtistID__1 = principal;
type ArtistID = principal;
service : () -> Tipping
