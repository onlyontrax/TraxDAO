type Tokens__1 = record {e8s: nat64;};
type Tokens = record {e8s: nat64;};
type TippingParticipants = vec Participants;
type Tipping = 
 service {
   accountIdentifierToBlob: (AccountIdentifier__1) ->
    (AccountIdentifierToBlobResult);
   addToReferralMap: (ArtistID__1, ArtistID__1) -> ();
   canisterAccount: () -> (AccountIdentifier);
   changePlatformFee: (float64) -> ();
   ckbtcBalance: (principal) -> (nat);
   ckbtcBalanceOfCanister: () -> (nat);
   cyclesBalance: () -> (nat) query;
   drainCanisterBalance: (nat64, principal, Ticker) -> (bool);
   getAllTippingTransactions: () ->
    (vec record {
           ArtistID__1;
           FanID;
           Timestamp;
           nat;
           Ticker;
         }) query;
   getStatus: (opt StatusRequest) -> (opt StatusResponse);
   icpBalance: (principal) -> (Tokens);
   icpBalanceOfCanister: () -> (Tokens);
   myAccountId: (principal) -> (AccountIdentifier);
   sendTip: (nat64, TippingParticipants, nat64, Ticker) -> ();
   traxBalance: (principal) -> (nat);
   traxBalanceOfCanister: () -> (nat);
 };
type Timestamp = int;
type Ticker = text;
type StatusResponse = 
 record {
   ckbtc_balance: opt nat;
   cycles: opt nat;
   heap_memory_size: opt nat;
   icp_balance: opt Tokens__1;
   memory_size: opt nat;
   trax_balance: opt nat;
   version: opt nat;
 };
type StatusRequest = 
 record {
   ckbtc_balance: opt bool;
   cycles: opt bool;
   heap_memory_size: opt bool;
   icp_balance: opt bool;
   memory_size: opt bool;
   trax_balance: opt bool;
   version: opt bool;
 };
type Percentage = float64;
type Participants = 
 record {
   participantID: ArtistID;
   participantPercentage: Percentage;
 };
type FanID = principal;
type ArtistID__1 = principal;
type ArtistID = principal;
type AccountIdentifier__1 = 
 variant {
   "blob": blob;
   "principal": principal;
   "text": text;
 };
type AccountIdentifierToBlobSuccess = blob;
type AccountIdentifierToBlobResult = 
 variant {
   err: AccountIdentifierToBlobErr;
   ok: AccountIdentifierToBlobSuccess;
 };
type AccountIdentifierToBlobErr = 
 record {
   kind: variant {
           InvalidAccountIdentifier;
           Other;
         };
   message: opt text;
 };
type AccountIdentifier = blob;
service : () -> Tipping
