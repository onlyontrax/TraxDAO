type Tokens = record {e8s: nat64;};
type TippingParticipants = vec Participants;
type Tipping = 
 service {
   accountIdentifierToBlob: (AccountIdentifier__1) ->
    (AccountIdentifierToBlobResult);
   canisterAccount: () -> (AccountIdentifier) query;
   canisterBTCAddress: () -> (text);
   canisterBalance: () -> (Tokens);
   changePlatformFee: (float64) -> ();
   cyclesBalance: () -> (nat);
   drainCanisterBalance: (nat64, principal) -> (bool);
   getAllTippingTransactions: () ->
    (vec record {
           ArtistID__1;
           FanID;
           Timestamp;
           nat;
           Ticker;
         }) query;
   getBalanceBTC: (text) -> (nat64);
   getTipDataArtist: (ArtistID__1) ->
    (vec record {
           FanID;
           Timestamp;
           nat;
           Ticker;
         }) query;
   getTipDataFan: (FanID) ->
    (vec record {
           ArtistID__1;
           Timestamp;
           nat;
           Ticker;
         }) query;
   getUserAddressBTC1: (principal) -> (text);
   getUserAddressBTC2: (principal) -> (text);
   sendTip: (nat64, TippingParticipants, nat64, Ticker) -> ();
 };
type Timestamp = int;
type Ticker = text;
type Percentage = float64;
type Participants = 
 record {
   participantID: ArtistID;
   participantPercentage: Percentage;
 };
type Network = 
 variant {
   Mainnet;
   Regtest;
   Testnet;
 };
type FanID = principal;
type ArtistID__1 = principal;
type ArtistID = principal;
type AccountIdentifier__1 = 
 variant {
   "blob": blob;
   "principal": principal;
   "text": text;
 };
type AccountIdentifierToBlobSuccess = blob;
type AccountIdentifierToBlobResult = 
 variant {
   err: AccountIdentifierToBlobErr;
   ok: AccountIdentifierToBlobSuccess;
 };
type AccountIdentifierToBlobErr = 
 record {
   kind: variant {
           InvalidAccountIdentifier;
           Other;
         };
   message: opt text;
 };
type AccountIdentifier = blob;
service : (Network) -> Tipping
