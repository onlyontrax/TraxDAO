type ArtistAccountData = record {
  createdAt : Timestamp;
  userPrincipal : principal;
};
type ArtistAccountData__1 = record {
  createdAt : Timestamp;
  userPrincipal : principal;
};
type ArtistBucket = service {
  changeCanisterSize : (nat) -> () oneway;
  changeCycleAmount : (nat) -> () oneway;
  createContent : (ContentInit) -> (opt record { ContentId; principal });
  deleteAccount : () -> ();
  deleteContentCanister : (principal) -> (bool);
  getAllContentCanisters : () -> (vec CanisterId) query;
  getCanisterOfContent : (ContentId) -> (opt CanisterId) query;
  getCurrentCyclesBalance : () -> (nat);
  getEntriesOfCanisterToContent : () -> (
      vec record { CanisterId; ContentId },
    ) query;
  getPrincipalThis : () -> (principal) query;
  getProfileInfo : (UserId) -> (opt ArtistAccountData__1) query;
  getStatus : (opt StatusRequest) -> (opt StatusResponse);
  getVersionNumber : () -> (nat) query;
  initCanister : () -> (bool);
  removeContent : (ContentId, nat) -> ();
  transferFreezingThresholdCycles : () -> ();
  updateProfileInfo : (ArtistAccountData__1) -> (bool);
};
type CanisterId = principal;
type ContentId = text;
type ContentInit = record {
  contentId : text;
  userId : UserId__1;
  name : text;
  createdAt : Timestamp;
  size : nat;
  tags : vec text;
  description : text;
  chunkCount : nat;
  extension : FileExtension;
};
type FileExtension = variant {
  aac;
  avi;
  gif;
  jpg;
  mp3;
  mp4;
  png;
  svg;
  wav;
  jpeg;
};
type StatusRequest = record {
  memory_size : opt bool;
  trax_balance : opt bool;
  version : opt bool;
  cycles : opt bool;
  heap_memory_size : opt bool;
  ckbtc_balance : opt bool;
  icp_balance : opt bool;
};
type StatusResponse = record {
  memory_size : opt nat;
  trax_balance : opt nat;
  version : opt nat;
  cycles : opt nat;
  heap_memory_size : opt nat;
  ckbtc_balance : opt nat;
  icp_balance : opt Tokens;
};
type Timestamp = int;
type Tokens = record { e8s : nat64 };
type UserId = principal;
type UserId__1 = principal;
service : (opt ArtistAccountData, principal, principal) -> ArtistBucket