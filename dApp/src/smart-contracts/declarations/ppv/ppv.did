type Tokens = record {e8s: nat64;};
type Timestamp = int;
type Ticker = text;
type StatusResponse = 
 record {
   ckbtc_balance: opt nat;
   cycles: opt nat;
   heap_memory_size: opt nat;
   icp_balance: opt Tokens;
   memory_size: opt nat;
   trax_balance: opt nat;
   version: opt nat;
 };
type StatusRequest = 
 record {
   ckbtc_balance: opt bool;
   cycles: opt bool;
   heap_memory_size: opt bool;
   icp_balance: opt bool;
   memory_size: opt bool;
   trax_balance: opt bool;
   version: opt bool;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Percentage = float64;
type Participants = 
 record {
   participantID: ArtistID;
   participantPercentage: Percentage;
 };
type PPV = 
 service {
   addPPVContent: (ContentID, Content) -> (Result);
   approveSpending: (nat) -> (Result_1);
   ckbtcBalanceOfCanister: () -> (nat);
   fanHasPaid: (ContentID, principal) -> (bool) query;
   getAllContentPayments: (nat, nat) ->
    (record {
       data:
        vec
         record {
           ContentID;
           ArtistID__1;
           FanID;
           Timestamp;
           nat;
           ContentType__1;
         };
       total: nat;
     });
   getAllEvents: () -> (vec Event) query;
   getContent: (ContentID) -> (opt Content) query;
   getStatus: (opt StatusRequest) -> (opt StatusResponse);
   purchaseContent: (ContentID, Ticker, nat) -> (Result_1);
   removeContent: (ContentID) -> (Result);
   traxBalanceOfCanister: () -> (nat);
   updatePPVContent: (ContentID, Content) -> (Result);
   updatePlatformFee: (float64) -> (Result);
 };
type FanID = principal;
type Event = 
 record {
   caller: principal;
   details: text;
   eventType: text;
   timestamp: int;
 };
type ContentType__1 = text;
type ContentType = text;
type ContentID = text;
type Content = 
 record {
   contentType: ContentType;
   participants: vec Participants;
   price: float64;
   publisher: ArtistID;
   publisherPercentage: Percentage;
 };
type ArtistID__1 = principal;
type ArtistID = principal;
service : () -> PPV
